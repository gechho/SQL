--Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345 . 
--Round your answer to  decimal places.

SELECT ROUND(LONG_W,4)
FROM STATION
WHERE LAT_N IN (SELECT MAX(LAT_N) FROM STATION WHERE LAT_N < 137.2345);


--Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than . 
--Round your answer to  decimal places.


SELECT ROUND(LONG_W,4) 
FROM STATION 
WHERE LAT_N > 38.7780 
ORDER BY LAT_N LIMIT 1;

--A median is defined as a number separating the higher half of a data set from the lower half. 
-- Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  decimal places.
select round(a.lat_n, 4)
from (
        select 
            lat_n, 
            percent_rank() over (order by lat_n) as percentile
        from station
    ) a
where a.percentile = .5
;


--other ideas:
SELECT ROUND(x.lat_n,4) FROM STATION x, STATION y
GROUP BY x.lat_n
HAVING SUM(SIGN(1-SIGN(y.lat_n-x.lat_n))) = (COUNT(*)+1)/2;


WITH ORDERED AS (
SELECT LAT_N, 
       ROW_NUMBER() OVER (ORDER BY LAT_N) AS ROW_N,
       COUNT(LAT_N) OVER() AS ROW_T
FROM STATION)
SELECT CAST(ROUND(AVG(LAT_N), 4) AS DECIMAL(10,4))
FROM ORDERED
WHERE ORDERED.ROW_N = CEILING((ORDERED.ROW_T+1)/2.0);


--You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.
/*
Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

Write a query to help Eve.

Sample Input

*/

SELECT IF(Grade < 8, null, name),Grade,Mark
FROM Students 
JOIN Grades ON Marks BETWEEN Min_Mark AND Max_Mark
ORDER BY Grade DESC, Name;

SELECT CASE WHEN Grade > 7 THEN Name ELSE Null END, Grade, Marks 
FROM Students s  Grades g
WHERE Grade = (SELECT Grade FROM Grades WHERE s.Marks BETWEEN g.Min_Mark AND g.Max_Mark)
ORDER BY Grade DESC,s.Name;


--P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
--Write a query to print the pattern P(20).


--*****

DELIMITER // 
CREATE PROCEDURE P(R INT) 
BEGIN 
    WHILE R > 0 
    DO 
        SELECT repeat('* ', R); 
        SET R = R - 1; 
    END WHILE; 
END; //

DELIMITER ;

CALL P(20);

/* P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
* 
* * 
* * * 
* * * * 
* * * * *
Write a query to print the pattern P(20).*/
DELIMITER // 
CREATE PROCEDURE P(R INT) 
BEGIN 
    DECLARE N INT default 1;

    WHILE N<=R 
    DO 
        SELECT repeat('* ', N); 
        SET N = N + 1; 

    END WHILE; 
END; //

DELIMITER ;

CALL P(20);


--OR----
SET @number = 0;

SELECT REPEAT('* ', @number := @number + 1) 
FROM information_schema.tables
LIMIT 20 ;